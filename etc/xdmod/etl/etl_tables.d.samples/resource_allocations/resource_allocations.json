{
    "#": "Define the destination table structure",

    "table_definition": {
        "name": "resource_allocations",
        "engine": "MyISAM",
        "columns": [
            {
                "name": "resource",
                "type": "varchar(40)",
                "nullable": true
            },
            {
                "name": "id",
                "type": "int(11)",
                "nullable": false
            },
            {
                "name": "available",
                "type": "int(11)",
                "nullable": true
            },
            {
                "name": "requested",
                "type": "int(11)",
                "nullable": true
            },
            {
                "name": "awarded",
                "type": "int(11)",
                "nullable": true
            },
            {
                "name": "recommended",
                "type": "int(11)",
                "nullable": true
            },
            {
                "name": "start_alloc_date",
                "type": "datetime",
                "nullable": false
            },
            {
                "name": "end_alloc_date",
                "type": "datetime",
                "nullable": false
            },
            {
                "name": "start_time_ts",
                "type": "int(10) unsigned",
                "nullable": false
            },
            {
                "name": "end_time_ts",
                "type": "int(10) unsigned",
                "nullable": false
            }
        ],

        "#": "Empty indexes and triggers are not really necessary.",

        "indexes": [],
        "triggers": []
    },

    "#": "Define the source query for the DatabaseIngestor action.",

    "source_query": {

        "#": "Specify the records that we will extract. Keys must match columns in the destination",
        "#": "and values are the SQL statements used to query the value. Key/value pairs generate SQL",
        "#": "of the form: 'value as key'",

        "records": {
            "resource": "res.display_resource_name",
            "id": "xdcdb_res.resource_id",

            "#": "This generates: min(orn.number_value) as available",

            "available": "min(orn.number_value)",
            "requested": "coalesce(sum(ar_req.resource_amount), 0)",
            "recommended": "coalesce(sum(ar_rec.resource_amount), NULL)",
            "awarded": "coalesce(sum(ar_awd.resource_amount), 0)",

            "#": "Complex SQL can be specified. Note that macros can also be used for complex statements.",

            "start_alloc_date": "date_trunc('quarter', o.submission_end_date)::timestamp + interval '3 months'",
            "end_alloc_date": "date_trunc('quarter', o.submission_end_date)::timestamp + interval '6 months' - interval '1 second'",

            "#": "${TIMEZONE} is a variable defined by the action. It will be substituted prior to",
            "#": "executing the query",

            "start_time_ts": "extract(epoch from (date_trunc('quarter', o.submission_end_date)::timestamp + interval '3 months') at time zone '${TIMEZONE}')",
            "end_time_ts": "extract(epoch from (date_trunc('quarter', o.submission_end_date)::timestamp + interval '6 months' - interval '1 second') at time zone '${TIMEZONE}')"

        },

        "#": "Multiple joins may be specified (note that the first in the list is used for the FROM",
        "#": "while the others are added as JOINs. A schema, alias, and join type may also be specified.",

        "joins": [{
            "name": "actions",
            "schema": "${SOURCE_SCHEMA}",
            "alias": "ac"
        },{
            "name": "requests",
            "schema": "${SOURCE_SCHEMA}",
            "alias": "r",
            "on": "r.request_id = ac.request_id"
        },{
            "name": "opportunities",
            "schema": "${SOURCE_SCHEMA}",
            "alias": "o",
            "on": "o.opportunity_id = r.opportunity_id"
        },{
            "name": "allocation_types",
            "schema": "${SOURCE_SCHEMA}",
            "alias": "at",
            "on": "at.allocation_type_id = o.allocation_type_id"
        },{
            "name": "opportunity_resource_numbers",
            "schema": "${SOURCE_SCHEMA}",
            "alias": "orn",
            "on": "orn.opportunity_id = o.opportunity_id"
        },{
            "name": "resources",
            "schema": "${SOURCE_SCHEMA}",
            "alias": "res",
            "on": "res.resource_id = orn.resource_id"
        },{
            "name": "action_resources",
            "schema": "${SOURCE_SCHEMA}",
            "alias": "ar_req",
            "type": "left outer",
            "on": "ar_req.action_id = ac.action_id and ar_req.resource_id = orn.resource_id and ar_req.resource_amount_type_id = 1"
        },{
            "name": "action_resources",
            "schema": "${SOURCE_SCHEMA}",
            "alias": "ar_rec",
            "type": "left outer",
            "on": "ar_rec.action_id = ac.action_id and ar_rec.resource_id = orn.resource_id and ar_rec.resource_amount_type_id = 3"
        },{
            "name": "action_resources",
            "schema": "${SOURCE_SCHEMA}",
            "alias": "ar_awd",
            "type": "left outer",
            "on": "ar_awd.action_id = ac.action_id and ar_awd.resource_id = orn.resource_id and ar_awd.resource_amount_type_id = 2"
        },{
            "name": "resources",
            "schema": "acct",
            "alias": "xdcdb_res",
            "type": "left outer",
            "on": "xdcdb_res.rdr_resource_id = res.resource_repository_key"
        }],

        "#": "Specify an optional set of WHERE clauses. Each will be ANDed together.",

        "where": [
            "o.allocations_process_id = 1",
            "at.allocation_type_id in (500006, 500016, 500018)",
            "ac.action_status_type_id != 500002",
            "ac.action_type_id in (2,3)",
            "res.resource_type_id = 500003",
            "ac.is_deleted = false",
            "orn.resource_number_type_id = 1"
        ],

        "#": "Specify an optional set of GROUP BY fields",

        "groupby": [
            "res.display_resource_name",
            "xdcdb_res.resource_id",
            "o.opportunity_id"
        ]

    }
}
